}
rm(J0, GRS_test, p.J0, p.GRS_test,
T_obs, K, p, J.tests, vcov_gmm_alpha, coef_gmm, gmm_alpha, MySummary)
}
}
plot.betas.gel <- plot.betas.gel[-1]
# rm(q,g)
##############################################################################################################################
#__________________________________________________________________________
# 5. Graphics for Betas
#__________________________________________________________________________
##############################################################################################################################
# mymeans<-apply(Xdata,2,mean)
# lambda <- mymeans[N_assets+1]
# plot.betas <- c(plot.betas.gmm, plot.betas.gel)
#
# Betas.Title <- paste("Portfolio", w, "-", v, "Months", "[CAPM only]" , sep="")
# pdf(paste(MyPath,"04.Graphics/03.Betas_(Multiplicative-Approach)[Volgelsang-Kiefer]/", Betas.Title, ".pdf", sep=""))
#
# par(mar=c(1,1,1,1)) # To fix problems with RStudio
# par(mfcol=c(3,2),
#     oma = c(1,1,1,1),
#     mar = c(1.9,1.1,1.9,1.1))
#
#   for (x in plot.betas){
#
#     if (x != "NA"){
#       Betas<-(coef(get(x))[(N_assets+1):(2*N_assets)])
#       Exp.R.ei <- Betas*lambda
#
#       plot(y=Exp.R.ei,
#            x=Betas,
#            main=x,
#            xlim=range(min(Betas,0), max(Betas)),
#            ylim=range(min(Exp.R.ei[1:N_assets],0) , max(Exp.R.ei[1:N_assets]) ),
#            axes=F, xaxs="i", yaxs="i" )
#
#       axis(1, pos=0)
#       axis(2, pos=0)
#       abline(v=0, h=0)
# #       abline(coef=c(0,1),col = "blue")
#       abline(coef=c(0,lambda),col = "red")
#       box(lty = 1)
#     } else{
#       frame()
#     }
#   }
#
# title(Betas.Title, outer=TRUE, cex = 4, font = 3)
# dev.off()
}
}
##############################################################################################################################
#__________________________________________________________________________
# 6. Final Part
#__________________________________________________________________________
##############################################################################################################################
Jtests.results.gmm <- Jtests.results.gmm[-1,]
Jtests.results.gel <- Jtests.results.gel[-1,]
J.tests.results.gmm <- J.tests.results.gmm[-1,]
J.tests.results.gel <- J.tests.results.gel[-1,]
# rm(v,w)
##############################################################################################################################
View(Jtests.results.gel)
View(Jtests.results.gmm)
View(J.tests.results.gmm)
View(J.tests.results.gel)
View(gel_0.CAPM.ET.net_returns.6.120)
save.image("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/Mestrado/Dissertacao/06.R Files/06.RData/10.GMM & GEL(Multiplicative-Approach)[Volgelsang-Kiefer][2019.04.14]/10.GMM & GEL(Multiplicative-Approach)[Volgelsang-Kiefer][2019.04.14].RData")
#_____________________________________________________________________________________________________________________________
# 0.Initializing
#_____________________________________________________________________________________________________________________________
##############################################################################################################################
MyPath <- "C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/Mestrado/Dissertacao/06.R Files/"
# MyPath <- "C:/Box Sync/Documents/Mestrado/Dissertacao/06.R Files/"
# MyPath <- "C:/Users/caiovigo/Downloads/06.R Files/"
source(paste(MyPath,"02.Caio's Scripts/Caio's_Script_[Beginning]_(Multiplicative-Approach)[2019].R", sep="") )
##############################################################################################################################
#_____________________________________________________________________________________________________________________________
# 1. Initializing the Longest loop
#_____________________________________________________________________________________________________________________________
##############################################################################################################################
#_____________________________________________________________________
# Creating some matrices to be filled during the loop
Jtests.results.gmm <- matrix(NA,1,8)
colnames(Jtests.results.gmm) <- c("Degrees of Freedom (Test E(g)=0)", "J-test", "P-value","Kernel for Cov Matrix ",
"Convergence Code", "Counts - Function eval.", "Counts - Gradient eval.", "Message")
Jtests.results.gel <- matrix(NA,1,11)
colnames(Jtests.results.gel) <- c("Over-identifying restrictions tests",
"LR test", "LR P-value",
"LM test", "LM P-value",
"J test", "J P-value",
"Convergence code for the lambdas",
"Counts - Function eval.", "Counts - Gradient eval.", "Message")
J.tests.results.gmm <- matrix(NA,1,4)
colnames(J.tests.results.gmm) <- c("J0", "GRS_test", "p.J0", "p.GRS_test")
J.tests.results.gel <- matrix(NA,1,4)
colnames(J.tests.results.gel) <- c("J0", "GRS_test", "p.J0", "p.GRS_test")
#_____________________________________________________________________
# Starting the loop
for (v in T.obs){
start=dim(factors)[1] - v + 1
end=dim(factors)[1]
factors_dates =  factors[start:end,1]
factors_Rf    =  factors[start:end,5]
factors_Mkt   =  factors[start:end,2]
factors_SMB   = (factors[start:end,3] ) - factors_Rf
factors_HML   = (factors[start:end,4] ) - factors_Rf
for (w in N.port){
N=dim( get(w) )[2]
t.initial=dim( get(w) )[1]
N_assets=N-1
Y = ( get(w)[ (t.initial-v+1):(t.initial) , (2:N)] ) - factors_Rf
#     Xdata=cbind(Y, factors_Mkt, factors_SMB, factors_HML)
##############################################################################################################################
#__________________________________________________________________________
# 2. Constructing a Single Matrix for all Lagged Variables ( |Z)
#__________________________________________________________________________
##############################################################################################################################
Z.inst <- c("Tbill_3m", #"Tbill_1m",
"Tbill_1y.cm", "Tbill_10y.cm", "Ind.Prod.Index", "Corp.bond.AAA", "Corp.bond.BAA", "CPI")
# 2.1 Constructing Z with a loop
Z.inst.data<-NULL
for (b in Z.inst){
t.Z.initial=dim( get(b) )[1]
z <- matrix(get(b)[ (t.Z.initial-v):(t.Z.initial-1) , 2])
#Notice: lag=t-1 in Z
colnames(z) <- b
Z.inst.data=cbind(Z.inst.data, z)
rm(z,b)
}
Z<- cbind( Z.inst.data[,"Tbill_3m"] , Z.inst.data[,"Ind.Prod.Index"] ,
( Z.inst.data[,"Corp.bond.BAA"] - Z.inst.data[,"Corp.bond.AAA"] ),
( Z.inst.data[,"Tbill_10y.cm"] - Z.inst.data[,"Tbill_1y.cm"]    ),
Z.inst.data[,"CPI"] )
colnames(Z) <- c("Tbill_3m" , "Ind.Prod.Index" , "spread.corp.bonds" , "spread.Tbill.10y_1y" , "CPI")
Xdata=cbind(Y, factors_Mkt, factors_SMB, factors_HML, Z)
##############################################################################################################################
#_____________________________________________________________________________________________________________________________
# 2. Setting Starting Values (t0)
#_____________________________________________________________________________________________________________________________
##############################################################################################################################
# 2.1 CAPM Factor Model
coefs.lm=coef(lm(Y~factors_Mkt))
t0_CAPM=c(coefs.lm[1,1:dim(Y)[2]], coefs.lm[2,1:dim(Y)[2]])
names(t0_CAPM)<-c(paste("alpha",1:(N-1),sep="-"), paste("beta1",1:(N-1),sep="-"))
# 2.2 Fama-French Linear Factor Model
coefs.lm=coef(lm(Y~factors_Mkt+factors_SMB+factors_HML))
t0_Fama=c(coefs.lm[1,1:dim(Y)[2]], coefs.lm[2,1:dim(Y)[2]], coefs.lm[3,1:dim(Y)[2]], coefs.lm[4,1:dim(Y)[2]])
names(t0_Fama)<-c(paste("alpha",1:(N-1),sep="-"), paste("beta1",1:(N-1),sep="-"),
paste("beta2",1:(N-1),sep="-"), paste("beta3",1:(N-1),sep="-"))
##############################################################################################################################
#__________________________________________________________________________
# 3. Computing the Tangency Portfolio
#__________________________________________________________________________
##############################################################################################################################
# tan.port = tangency.portfolio( apply(Y,2,mean), cov(Y), risk.free=mean(factors_Rf))
# # tan.port = tangency.portfolio( apply(Y,2,mean), cov(Y), risk.free=as.vector(0) )
#
# tan.port.weights <- as.vector(tan.port$weights)
#
# Xdata.tan.port <- t(tan.port.weights) %*% t(Y)
# muhat.Xdata.tan.port = mean(t(Xdata.tan.port))
# varhat.Xdata.tan.port = cov(t(Xdata.tan.port))
##############################################################################################################################
#__________________________________________________________________________
# 4. GMM/GEL
#__________________________________________________________________________
##############################################################################################################################
plot.betas.gmm <- c(NA)
plot.betas.gel <- c(NA)
E_T.FF <- c(mean(factors_Mkt), mean(factors_SMB), mean(factors_HML))
VCOV_T.FF <- var(Xdata[,( (dim(Xdata)[2]-2 - 5): (dim(Xdata)[2] - 5) ) ])
# 4-A GMM
for (q in types.gmm){
for (g in g_T){
if (g==("CAPM")|g==("CAPM.wa")|g==("CAPM.SDF")|g==("CAPM.wa.SDF"))
{
p <-"t0_CAPM"
K = 1
} else{
if (g==("FF")|g==("FF.wa")|g==("FF.SDF")|g==("FF.wa.SDF"))
{
p <-"t0_Fama"
K=3
}
}
#_____________________________________________________________________
# 4.1 Computing GMM
gmm = paste("gmm", g, q, w, v, sep="." )
GMM<-assign( gmm, tryCatch( gmm( get( paste( "gT_", g, sep="" ) ), Xdata, get(p), paste("type=", q, sep=""), vcov="HAC" ) ,error = function(e) {print("Error"); NaN})   )
if (is.recursive(GMM)==TRUE){
MySummary<-c(as.character(summary(GMM)$stest$ntest),summary(GMM)$stest$test[1],summary(GMM)$stest$test[2],
as.character(summary(GMM)$kernel), summary(GMM)$algo$convergence,
summary(GMM)$algo$counts[1], summary(GMM)$algo$counts[2], as.character(summary(GMM)$algo$message) )
#_____________________________________________________________________
# 4.2 Tests of Efficiency
# T = number of time-series observations
# N = number of assets
# K = number of factors
T_obs = v
# N_assets = (N-1)
vcov_gmm_alpha <- vcov(GMM)[1:N_assets, 1:N_assets]
# vcov_gmm_errors = vcov_gmm_alpha/((1/T_obs)*( (1+sqrt( mean(factors_Mkt) /sd(factors_Mkt) ) )))
coef_gmm <- as.vector(coef(GMM))
gmm_alpha <- as.matrix(coef_gmm[1:N_assets], N_assets, 1)
# 4.2.1 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#       as in COCHRANE, J. - page 230 / or CAMPBELL, Lo & MACKINLAY (2007) - page 192 (equation 5.3.22)
J0 = t(gmm_alpha) %*% (try(solve(vcov_gmm_alpha))) %*% gmm_alpha
p.J0 = pchisq(as.vector(J0), df=N_assets, lower.tail=FALSE)
#           # 4.2.2 and 4.2.4
#
#           if (g==("CAPM")|g==("CAPM.wa")|g==("CAPM.SDF")|g==("CAPM.wa.SDF"))
#             {
#
#               # 4.2.2 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#               #       as in COCHRANE, J. - page 232 / or CAMPBELL, Lo & MACKINLAY (2007) - page 196 (equation 5.3.42)
#               #       / or FERSON & SIEGEL (2009) equation (10)
#
#               GRS_tan_J0 = T_obs*(
#                 (  ( muhat.Xdata.tan.port/sqrt(varhat.Xdata.tan.port) )^2 - (mean(factors_Mkt)/sd(factors_Mkt))^2 ) /
#                   (  1 + (mean(factors_Mkt)/sd(factors_Mkt))^2                                                    )
#               )
#
#               p.GRS_tan_J0 = pchisq(as.vector(GRS_tan_J0), df=N_assets, lower.tail=FALSE)
#
#
#
#               # 4.2.4 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#               #       as in COCHRANE, J. - page 232 / or CAMPBELL, Lo & MACKINLAY (2007) - page 196 (equation 5.3.42)
#               #       / or FERSON & SIEGEL (2009) equation (10)
#               #
#               #       Finite-sample counterpart to J0 test
#
#               GRS_tan_2 = ((T_obs - N_assets - K)/N_assets)*
#                 (
#                   (  ( muhat.Xdata.tan.port/sqrt(varhat.Xdata.tan.port) )^2 - (mean(factors_Mkt)/sd(factors_Mkt))^2 ) /
#                     (  1 + (mean(factors_Mkt)/sd(factors_Mkt))^2                                                    )
#                 )
#
#               p.GRS_tan_2 = pf(as.vector(GRS_tan_2), df1=N_assets, df2=(T_obs - N_assets - K), lower.tail=FALSE)
#
#
#
#             } else{
#                 if (g==("FF")|g==("FF.wa")|g==("FF.SDF")|g==("FF.wa.SDF"))
#                 {
#
#                   # 4.2.2 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#                   #       as in COCHRANE, J. - page 232 / or CAMPBELL, Lo & MACKINLAY (2007) - page 196 (equation 5.3.42)
#                   #       / or FERSON & SIEGEL (2009) equation (10)
#
#                   GRS_tan_J0 = T_obs*(
#                     (  ( muhat.Xdata.tan.port/sqrt(varhat.Xdata.tan.port) )^2 -  ( t(E_T.FF) %*% solve(VCOV_T.FF) %*% E_T.FF  ) ) /
#                       (  1 + ( t(E_T.FF) %*% solve(VCOV_T.FF) %*% E_T.FF  )                                                    )
#                   )
#
#                   p.GRS_tan_J0 = pchisq(as.vector(GRS_tan_J0), df=N_assets, lower.tail=FALSE)
#
#
#
#                   # 4.2.4 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#                   #       as in COCHRANE, J. - page 232 / or CAMPBELL, Lo & MACKINLAY (2007) - page 196 (equation 5.3.42)
#                   #       / or FERSON & SIEGEL (2009) equation (10)
#                   #
#                   #       Finite-sample counterpart to J0 test
#
#                   GRS_tan_2 = ((T_obs - N_assets - K)/N_assets)*
#                     (
#                       (  ( muhat.Xdata.tan.port/sqrt(varhat.Xdata.tan.port) )^2 -  ( t(E_T.FF) %*% solve(VCOV_T.FF) %*% E_T.FF  ) ) /
#                         (  1 + ( t(E_T.FF) %*% solve(VCOV_T.FF) %*% E_T.FF  )                                                    )
#                     )
#
#                   p.GRS_tan_2 = pf(as.vector(GRS_tan_2), df1=N_assets, df2=(T_obs - N_assets - K), lower.tail=FALSE)
#
#                 }
#             }
# 4.2.3 GRS test statistic (Gibbons, Ross & Shanken (1989)) Finite-sample counterpart to J0 test
GRS_test = ((T_obs - N_assets - K)/N_assets) * (1/T_obs) *
t(gmm_alpha) %*% (try(solve(vcov_gmm_alpha))) %*% gmm_alpha
p.GRS_test = pf(as.vector(GRS_test), df1=N_assets, df2=(T_obs - N_assets - K), lower.tail=FALSE)
#_____________________________________________________________________
# 4.3 Saving tests results
J.tests <- c(J0 , GRS_test, p.J0 , p.GRS_test)
#           J.tests <- c(GRS_tan_J0, GRS_tan_2, p.GRS_tan_J0, p.GRS_tan_2)
if (K==1){
plot.betas.gmm<-c(plot.betas.gmm, gmm)
}
} else{
MySummary<-rep(NaN,8)
J.tests <- rep(NaN,8)
if (K==1){
plot.betas.gmm<-c(plot.betas.gmm, "NA")
}
}
MySummary<-matrix(MySummary,1,8)
rownames(MySummary)<-c(gmm)
Jtests.results.gmm<-rbind(Jtests.results.gmm,MySummary)
J.tests <- matrix(J.tests,1,4)
# rownames(J.tests) <- paste("gmm for", g, "model, using type" ,q, "with", w, "portfolio", "for", v, "months", sep=" " )
rownames(J.tests) <- gmm
J.tests.results.gmm <- rbind(J.tests.results.gmm, J.tests)
#_____________________________________________________________________
# 4.4 Dropping variables
rm(J0, GRS_test, p.J0, p.GRS_test,
T_obs, K, p, J.tests, vcov_gmm_alpha, coef_gmm, gmm_alpha, MySummary)
}
}
plot.betas.gmm <- plot.betas.gmm[-1]
# rm(q,g)
# 4-B GEL
for (q in types.gel){
for (g in g_T){
if (g==("CAPM")|g==("CAPM.wa")|g==("CAPM.SDF")|g==("CAPM.wa.SDF"))
{
p <-"t0_CAPM"
K = 1
} else{
if (g==("FF")|g==("FF.wa")|g==("FF.SDF")|g==("FF.wa.SDF"))
{
p <-"t0_Fama"
K=3
}
}
#_____________________________________________________________________
# 4.1 Computing GEL
gel = paste("gel", g, q, w, v, sep="." )
GEL <- assign( gel, tryCatch( gel( get( paste( "gT_", g, sep="" ) ), Xdata, get(p), smooth = TRUE, paste("type=", q, sep=""), optlam="optim" ) ,error = function(e) {print("Error"); NaN})   )
if (is.recursive(GEL)==TRUE){
MySummary<-c(as.character(summary(GEL)$stest$ntest),
summary(GEL)$stest$test[1,1], summary(GEL)$stest$test[1,2],
summary(GEL)$stest$test[2,1], summary(GEL)$stest$test[2,2],
summary(GEL)$stest$test[3,1], summary(GEL)$stest$test[3,2],
summary(GEL)$conv_lambda$convergence,
summary(GEL)$conv_lambda$counts[1], summary(GEL)$conv_lambda$counts[2],
as.character(summary(GEL)$conv_lambda$counts[1],summary(GEL)$conv_lambda$message) )
#_____________________________________________________________________
# 4.2 Tests of Efficiency
# T = number of time-series observations
# N = number of assets
# K = number of factors
T_obs = v
N_assets = (N-1)
vcov_gel_alpha <- vcov(GEL)[1:N_assets, 1:N_assets]
coef_gel <- as.vector(coef(GEL))
gel_alpha <- as.matrix(coef_gel[1:N_assets], N_assets, 1)
# 4.2.1 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#       as in COCHRANE, J. - page 230 / or CAMPBELL, Lo & MACKINLAY (2007) - page 192 (equation 5.3.22)
J0 = t(gel_alpha) %*% (try(solve(vcov_gel_alpha))) %*% gel_alpha
p.J0 = pchisq(as.vector(J0), df=N_assets, lower.tail=FALSE)
#         # 4.2.2 and 4.2.4
#
#         if (g==("CAPM")|g==("CAPM.wa")|g==("CAPM.SDF")|g==("CAPM.wa.SDF"))
#         {
#
#           # 4.2.2 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#           #       as in COCHRANE, J. - page 232 / or CAMPBELL, Lo & MACKINLAY (2007) - page 196 (equation 5.3.42)
#           #       / or FERSON & SIEGEL (2009) equation (10)
#
#           GRS_tan_J0 = T_obs*(
#             (  ( muhat.Xdata.tan.port/sqrt(varhat.Xdata.tan.port) )^2 - (mean(factors_Mkt)/sd(factors_Mkt))^2 ) /
#                (  1 + (mean(factors_Mkt)/sd(factors_Mkt))^2                                                   )
#           )
#
#           p.GRS_tan_J0 = pchisq(as.vector(GRS_tan_J0), df=N_assets, lower.tail=FALSE)
#
#
#
#           # 4.2.4 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#           #       as in COCHRANE, J. - page 232 / or CAMPBELL, Lo & MACKINLAY (2007) - page 196 (equation 5.3.42)
#           #       / or FERSON & SIEGEL (2009) equation (10)
#           #
#           #       Finite-sample counterpart to J0 test
#
#           GRS_tan_2 = ((T_obs - N_assets - K)/N_assets)*
#             (
#               (  ( muhat.Xdata.tan.port/sqrt(varhat.Xdata.tan.port) )^2 - (mean(factors_Mkt)/sd(factors_Mkt))^2 ) /
#                  (  1 + (mean(factors_Mkt)/sd(factors_Mkt))^2                                                   )
#             )
#
#           p.GRS_tan_2 = pf(as.vector(GRS_tan_2), df1=N_assets, df2=(T_obs - N_assets - K), lower.tail=FALSE)
#
#
#
#         } else{
#           if (g==("FF")|g==("FF.wa")|g==("FF.SDF")|g==("FF.wa.SDF"))
#           {
#
#             # 4.2.2 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#             #       as in COCHRANE, J. - page 232 / or CAMPBELL, Lo & MACKINLAY (2007) - page 196 (equation 5.3.42)
#             #       / or FERSON & SIEGEL (2009) equation (10)
#
#             GRS_tan_J0 = T_obs*(
#               (  ( muhat.Xdata.tan.port/sqrt(varhat.Xdata.tan.port) )^2 -  ( t(E_T.FF) %*% solve(VCOV_T.FF) %*% E_T.FF  ) ) /
#                  (  1 + ( t(E_T.FF) %*% solve(VCOV_T.FF) %*% E_T.FF  )                                                    )
#             )
#
#             p.GRS_tan_J0 = pchisq(as.vector(GRS_tan_J0), df=N_assets, lower.tail=FALSE)
#
#
#
#             # 4.2.4 Wald test statistic: J0 ~assymptotic~ chi-sq (N)
#             #       as in COCHRANE, J. - page 232 / or CAMPBELL, Lo & MACKINLAY (2007) - page 196 (equation 5.3.42)
#             #       / or FERSON & SIEGEL (2009) equation (10)
#             #
#             #       Finite-sample counterpart to J0 test
#
#             GRS_tan_2 = ((T_obs - N_assets - K)/N_assets)*
#               (
#                 (  ( muhat.Xdata.tan.port/sqrt(varhat.Xdata.tan.port) )^2 -  ( t(E_T.FF) %*% solve(VCOV_T.FF) %*% E_T.FF  ) ) /
#                   (  1 + ( t(E_T.FF) %*% solve(VCOV_T.FF) %*% E_T.FF  )                                                    )
#               )
#
#             p.GRS_tan_2 = pf(as.vector(GRS_tan_2), df1=N_assets, df2=(T_obs - N_assets - K), lower.tail=FALSE)
#
#           }
#         }
# 4.2.3 GRS test statistic (Gibbons, Ross & Shanken (1989)) Finite-sample counterpart to J0 test
GRS_test = ((T_obs - N_assets - K)/N_assets) * (1/T_obs) *
t(gel_alpha) %*% (try(solve(vcov_gel_alpha))) %*% gel_alpha
p.GRS_test = pf(as.vector(GRS_test), df1=N_assets, df2=(T_obs - N_assets - K), lower.tail=FALSE)
#_____________________________________________________________________
# 4.3 Saving tests results
J.tests <- c(J0 , GRS_test, p.J0 , p.GRS_test)
if (K==1){
plot.betas.gel<-c(plot.betas.gel, gel)
}
} else{
MySummary<-rep(NaN,11)
J.tests <- rep(NaN,8)
if (K==1){
plot.betas.gel<-c(plot.betas.gel, "NA")
}
}
MySummary<-matrix(MySummary,1,11)
rownames(MySummary)<-c(gel)
Jtests.results.gel<-rbind(Jtests.results.gel,MySummary)
J.tests <- matrix(J.tests,1,4)
# rownames(J.tests) <- paste("gel for", g, "model, using type" ,q, "with", w, "portfolio", "for", v, "months", sep=" " )
rownames(J.tests) <- gel
J.tests.results.gel <- rbind(J.tests.results.gel, J.tests)
#_____________________________________________________________________
# 4.4 Dropping variables
rm(J0, GRS_test, p.J0, p.GRS_test,
T_obs, K, p, J.tests, vcov_gmm_alpha, coef_gmm, gmm_alpha, MySummary)
}
}
plot.betas.gel <- plot.betas.gel[-1]
# rm(q,g)
##############################################################################################################################
#__________________________________________________________________________
# 5. Graphics for Betas
#__________________________________________________________________________
##############################################################################################################################
mymeans<-apply(Xdata,2,mean)
lambda <- mymeans[N_assets+1]
plot.betas <- c(plot.betas.gmm, plot.betas.gel)
Betas.Title <- paste("Portfolio", w, "-", v, "Months", "[CAPM only]" , sep="")
pdf(paste(MyPath,"04.Graphics/03.Betas_(Multiplicative-Approach)/", Betas.Title, ".pdf", sep=""))
par(mar=c(1,1,1,1)) # To fix problems with RStudio
par(mfcol=c(3,2),
oma = c(1,1,1,1),
mar = c(1.9,1.1,1.9,1.1))
for (x in plot.betas){
if (x != "NA"){
Betas<-(coef(get(x))[(N_assets+1):(2*N_assets)])
Exp.R.ei <- Betas*lambda
plot(y=Exp.R.ei,
x=Betas,
main=x,
xlim=range(min(Betas,0), max(Betas)),
ylim=range(min(Exp.R.ei[1:N_assets],0) , max(Exp.R.ei[1:N_assets]) ),
axes=F, xaxs="i", yaxs="i" )
axis(1, pos=0)
axis(2, pos=0)
abline(v=0, h=0)
#       abline(coef=c(0,1),col = "blue")
abline(coef=c(0,lambda),col = "red")
box(lty = 1)
} else{
frame()
}
}
title(Betas.Title, outer=TRUE, cex = 4, font = 3)
dev.off()
}
}
##############################################################################################################################
#__________________________________________________________________________
# 6. Final Part
#__________________________________________________________________________
##############################################################################################################################
Jtests.results.gmm <- Jtests.results.gmm[-1,]
Jtests.results.gel <- Jtests.results.gel[-1,]
J.tests.results.gmm <- J.tests.results.gmm[-1,]
J.tests.results.gel <- J.tests.results.gel[-1,]
# rm(v,w)
##############################################################################################################################
J.tests.results.gmm
J.tests.results.gmel
J.tests.results.gel
GEL
vcov(GEL)
as.vector(coef(GEL))
coef(GEL))
coef(GEL)
as.matrix(coef_gel[1:N_assets], N_assets, 1)
t(gel_alpha) %*% (try(solve(vcov_gel_alpha))) %*% gel_alpha
pchisq(as.vector(J0), df=N_assets, lower.tail=FALSE)
g_T
head( Xdata)
file.exists("~/.ssh/id_rsa.pub")
