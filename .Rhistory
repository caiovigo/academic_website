#-------------------------------------------------------------------
for (horizon_j in horizon){
my_independent_variables_lagged <- as_tibble(apply(my_independent_variables[,-1], 2, function(z)lag(z, horizon_j)))
my_independent_variables_control_lag_1 <- as_tibble(apply(my_independent_variables[,-1], 2, function(z)lag(z, horizon_j-1)))
forecast_results <- NULL
forecast_results_robust <- NULL
for (ambiguity_j in 1:(dim(my_independent_variables)[2]-1)){
my_independent_variable <- my_independent_variables[[ambiguity_j+1]]
my_independent_variable_lagged <- my_independent_variables_lagged[[ambiguity_j]]
my_independent_variable_control_lag_1 <- my_independent_variables_control_lag_1[[ambiguity_j]]
my_independent_variable_controls <- NULL
for (control_j in sort(1:horizon_j, decreasing=TRUE)){
my_independent_variable_controls <- cbind(my_independent_variable_controls ,
lag(my_independent_variable, control_j-1) )
}
horizon_forecast_results_robust <- NULL
for (i in 1:dim(my_dependent_variables[,-1])[2]){
fit <- lm(unlist(my_dependent_variables[,i+1]) ~ my_independent_variable_lagged + my_independent_variable_controls)
fit_robust <- coeftest(fit, vcov=NeweyWest(fit, lag = horizon_j, prewhite = FALSE))
horizon_forecast_results_dep_var_j <- rbind( matrix(fit$coefficients[1:3], 3, 1), # length(fit$coefficients), 1),
matrix(fit_robust[1:3,2], 3, 1), # length(fit$coefficients), 1),
matrix(fit_robust[1:3,3], 3, 1), # length(fit$coefficients), 1),
matrix(fit_robust[1:3,4], 3, 1), # length(fit$coefficients), 1),
summary(fit)$r.squared,
summary(fit)$adj.r.squared,
summary(fit)$fstatistic[1],
summary(fit)$df[1] + summary(fit)$df[2])
colnames(horizon_forecast_results_dep_var_j) <- colnames(my_dependent_variables[,i+1])
horizon_forecast_results_robust <- cbind(horizon_forecast_results_robust, horizon_forecast_results_dep_var_j)
rownames(horizon_forecast_results_robust) <- paste(my_independent_variables_list[ambiguity_j], coefficients_labels)
}
horizon_forecast <- apply(my_dependent_variables[,-1], 2, function(z)lm(z ~ my_independent_variable_lagged+my_independent_variable_control_lag_1))
horizon_forecast_coefs <- sapply(horizon_forecast, function(z)unname(summary(z)$coefficients))
horizon_forecast_r_squared <- sapply(horizon_forecast, function(z)unname(summary(z)$r.squared))
horizon_forecast_adj_r_squared <- sapply(horizon_forecast, function(z)unname(summary(z)$adj.r.squared))
horizon_forecast_F <- sapply(horizon_forecast, function(z)unname(summary(z)$fstatistic[1]))
horizon_forecast_n_obs <- sapply(horizon_forecast, function(z)unname(summary(z)$df[1] + summary(z)$df[2]))
horizon_forecast_results <- rbind( horizon_forecast_coefs,
horizon_forecast_r_squared,
horizon_forecast_adj_r_squared,
horizon_forecast_F,
horizon_forecast_n_obs)
rownames(horizon_forecast_results) <- paste(my_independent_variables_list[ambiguity_j], coefficients_labels)
forecast_results <- rbind(forecast_results, horizon_forecast_results)
forecast_results_robust <- rbind(forecast_results_robust, horizon_forecast_results_robust)
}
assign(paste("forecast_results_", horizon_j, sep=""), forecast_results)
assign(paste("forecast_results_robust_", horizon_j, sep=""), forecast_results_robust)
}
which_forecast_results <- "forecast_results_robust"
my_string_to_detect <- 'R_2'
cte <- 1
my_column <- 1
# "vwretd" "vwretx" "ewretd" "ewretx" "sprtrn" "vwindd" "vwindx" "ewindd" "ewindx" "spindx"
results <- tibble(  a= round(get(paste(which_forecast_results, "_1", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_1", sep=""))), my_string_to_detect ),my_column], 4)*cte,
b= round(get(paste(which_forecast_results, "_2", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_2", sep=""))), my_string_to_detect ),my_column], 4)*cte,
c= round(get(paste(which_forecast_results, "_3", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_3", sep=""))), my_string_to_detect ),my_column], 4)*cte,
d= round(get(paste(which_forecast_results, "_4", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_4", sep=""))), my_string_to_detect ),my_column], 4)*cte,
e= round(get(paste(which_forecast_results, "_5", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_5", sep=""))), my_string_to_detect ),my_column], 4)*cte,
f= round(get(paste(which_forecast_results, "_6", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_6", sep=""))), my_string_to_detect ),my_column], 4)*cte,
g= round(get(paste(which_forecast_results, "_7", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_7", sep=""))), my_string_to_detect ),my_column], 4)*cte,
h= round(get(paste(which_forecast_results, "_8", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_8", sep=""))), my_string_to_detect ),my_column], 4)*cte,
i= round(get(paste(which_forecast_results, "_9", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_9", sep=""))), my_string_to_detect ),my_column], 4)*cte,
j= round(get(paste(which_forecast_results, "_10", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_10", sep=""))), my_string_to_detect ),my_column], 4)*cte,
k= round(get(paste(which_forecast_results, "_11", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_11", sep=""))), my_string_to_detect ),my_column], 4)*cte,
l= round(get(paste(which_forecast_results, "_12", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_12", sep=""))), my_string_to_detect ),my_column], 4)*cte,
m= round(get(paste(which_forecast_results, "_13", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_13", sep=""))), my_string_to_detect ),my_column], 4)*cte,
n= round(get(paste(which_forecast_results, "_14", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_14", sep=""))), my_string_to_detect ),my_column], 4)*cte,
o= round(get(paste(which_forecast_results, "_36", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_36", sep=""))), my_string_to_detect ),my_column], 4)*cte,
p= round(get(paste(which_forecast_results, "_60", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_60", sep=""))), my_string_to_detect ),my_column], 4)*cte )
names(results) <- c(paste(rep("f_"), seq(from=1, to=14, by=1), sep=""), "f_36", "f_60")
results<-as.data.frame(results)
rownames(results) <-  paste(my_independent_variables_list, my_string_to_detect )
results
which_forecast_results <- "forecast_results_robust"
my_string_to_detect <- 'p-value_beta_1'
cte <- 1
my_column <- 1
# "vwretd" "vwretx" "ewretd" "ewretx" "sprtrn" "vwindd" "vwindx" "ewindd" "ewindx" "spindx"
results <- tibble(  a= round(get(paste(which_forecast_results, "_1", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_1", sep=""))), my_string_to_detect ),my_column], 4)*cte,
b= round(get(paste(which_forecast_results, "_2", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_2", sep=""))), my_string_to_detect ),my_column], 4)*cte,
c= round(get(paste(which_forecast_results, "_3", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_3", sep=""))), my_string_to_detect ),my_column], 4)*cte,
d= round(get(paste(which_forecast_results, "_4", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_4", sep=""))), my_string_to_detect ),my_column], 4)*cte,
e= round(get(paste(which_forecast_results, "_5", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_5", sep=""))), my_string_to_detect ),my_column], 4)*cte,
f= round(get(paste(which_forecast_results, "_6", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_6", sep=""))), my_string_to_detect ),my_column], 4)*cte,
g= round(get(paste(which_forecast_results, "_7", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_7", sep=""))), my_string_to_detect ),my_column], 4)*cte,
h= round(get(paste(which_forecast_results, "_8", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_8", sep=""))), my_string_to_detect ),my_column], 4)*cte,
i= round(get(paste(which_forecast_results, "_9", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_9", sep=""))), my_string_to_detect ),my_column], 4)*cte,
j= round(get(paste(which_forecast_results, "_10", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_10", sep=""))), my_string_to_detect ),my_column], 4)*cte,
k= round(get(paste(which_forecast_results, "_11", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_11", sep=""))), my_string_to_detect ),my_column], 4)*cte,
l= round(get(paste(which_forecast_results, "_12", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_12", sep=""))), my_string_to_detect ),my_column], 4)*cte,
m= round(get(paste(which_forecast_results, "_13", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_13", sep=""))), my_string_to_detect ),my_column], 4)*cte,
n= round(get(paste(which_forecast_results, "_14", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_14", sep=""))), my_string_to_detect ),my_column], 4)*cte,
o= round(get(paste(which_forecast_results, "_36", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_36", sep=""))), my_string_to_detect ),my_column], 4)*cte,
p= round(get(paste(which_forecast_results, "_60", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_60", sep=""))), my_string_to_detect ),my_column], 4)*cte )
names(results) <- c(paste(rep("f_"), seq(from=1, to=14, by=1), sep=""), "f_36", "f_60")
results<-as.data.frame(results)
rownames(results) <-  paste(my_independent_variables_list, my_string_to_detect )
results
my_independent_variables
results
which_forecast_results <- "forecast_results_robust"
my_string_to_detect <- 'R_2'
cte <- 1
my_column <- 1
# "vwretd" "vwretx" "ewretd" "ewretx" "sprtrn" "vwindd" "vwindx" "ewindd" "ewindx" "spindx"
results <- tibble(  a= round(get(paste(which_forecast_results, "_1", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_1", sep=""))), my_string_to_detect ),my_column], 4)*cte,
b= round(get(paste(which_forecast_results, "_2", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_2", sep=""))), my_string_to_detect ),my_column], 4)*cte,
c= round(get(paste(which_forecast_results, "_3", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_3", sep=""))), my_string_to_detect ),my_column], 4)*cte,
d= round(get(paste(which_forecast_results, "_4", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_4", sep=""))), my_string_to_detect ),my_column], 4)*cte,
e= round(get(paste(which_forecast_results, "_5", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_5", sep=""))), my_string_to_detect ),my_column], 4)*cte,
f= round(get(paste(which_forecast_results, "_6", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_6", sep=""))), my_string_to_detect ),my_column], 4)*cte,
g= round(get(paste(which_forecast_results, "_7", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_7", sep=""))), my_string_to_detect ),my_column], 4)*cte,
h= round(get(paste(which_forecast_results, "_8", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_8", sep=""))), my_string_to_detect ),my_column], 4)*cte,
i= round(get(paste(which_forecast_results, "_9", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_9", sep=""))), my_string_to_detect ),my_column], 4)*cte,
j= round(get(paste(which_forecast_results, "_10", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_10", sep=""))), my_string_to_detect ),my_column], 4)*cte,
k= round(get(paste(which_forecast_results, "_11", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_11", sep=""))), my_string_to_detect ),my_column], 4)*cte,
l= round(get(paste(which_forecast_results, "_12", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_12", sep=""))), my_string_to_detect ),my_column], 4)*cte,
m= round(get(paste(which_forecast_results, "_13", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_13", sep=""))), my_string_to_detect ),my_column], 4)*cte,
n= round(get(paste(which_forecast_results, "_14", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_14", sep=""))), my_string_to_detect ),my_column], 4)*cte,
o= round(get(paste(which_forecast_results, "_36", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_36", sep=""))), my_string_to_detect ),my_column], 4)*cte,
p= round(get(paste(which_forecast_results, "_60", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_60", sep=""))), my_string_to_detect ),my_column], 4)*cte )
names(results) <- c(paste(rep("f_"), seq(from=1, to=14, by=1), sep=""), "f_36", "f_60")
results<-as.data.frame(results)
rownames(results) <-  paste(my_independent_variables_list, my_string_to_detect )
results
#-------------------------------------------------------------------
# BIVARIATE PREDICTOR PERFORMANCE
#-------------------------------------------------------------------
GW_names <- c("b/m",
"dfr",
"dfy",
"infl",
"ltr",
"lty",
"ntis",
"svar",
"tms",
"tbl")
for (horizon_j in horizon){
my_independent_variables_lagged <- as_tibble(apply(my_independent_variables[,-1], 2, function(z)lag(z, horizon_j)))
my_independent_variables_lagged_GW <- select(my_independent_variables_lagged, GW_names)
# forecast_results <- NULL
forecast_results_robust <- NULL
for (ambiguity_j in 1:8){
my_independent_variable <- my_independent_variables[[ambiguity_j+1]]
my_independent_variable_lagged <- my_independent_variables_lagged[[ambiguity_j]]
my_independent_variable_controls <- NULL
for (control_j in sort(1:horizon_j, decreasing=TRUE)){
my_independent_variable_controls <- cbind(my_independent_variable_controls ,
lag(my_independent_variable, control_j-1) )
}
forecast_results_robust_by_dep_var_GW_j <- NULL
for (GW_j in 1:length(GW_names)){
horizon_forecast_results_robust <- NULL
for (i in 1:dim(my_dependent_variables[,-1])[2]){
fit <- lm(unlist(my_dependent_variables[,i+1]) ~ my_independent_variable_lagged + my_independent_variables_lagged_GW[[GW_j]] + my_independent_variable_controls)
fit_robust <- coeftest(fit, vcov=NeweyWest(fit, lag = horizon_j, prewhite = FALSE))
horizon_forecast_results_dep_var_j <- rbind( matrix(fit$coefficients[1:3], 3, 1),
matrix(fit_robust[1:3,2], 3, 1),
matrix(fit_robust[1:3,3], 3, 1),
matrix(fit_robust[1:3,4], 3, 1),
summary(fit)$r.squared,
summary(fit)$adj.r.squared,
summary(fit)$fstatistic[1],
summary(fit)$df[1] + summary(fit)$df[2])
colnames(horizon_forecast_results_dep_var_j) <- colnames(my_dependent_variables[,i+1])
horizon_forecast_results_robust <- cbind(horizon_forecast_results_robust, horizon_forecast_results_dep_var_j)
rownames(horizon_forecast_results_robust) <- paste(my_independent_variables_list[ambiguity_j], " " , GW_names[GW_j], "-", coefficients_labels, sep="")
}
forecast_results_robust_by_dep_var_GW_j <- rbind(forecast_results_robust_by_dep_var_GW_j, horizon_forecast_results_robust)
}
forecast_results_robust <- rbind(forecast_results_robust, forecast_results_robust_by_dep_var_GW_j)
}
assign(paste("forecast_results_biv_robust_", horizon_j, sep=""), forecast_results_robust)
}
#-------------------------------------------------------------------
which_forecast_results <- "forecast_results_biv_robust"
my_string_to_detect <- paste(GW_names[1], "t_beta_1", sep="-")
cte <- 1
my_column <- 5
# "vwretd" "vwretx" "ewretd" "ewretx" "sprtrn" "vwindd" "vwindx" "ewindd" "ewindx" "spindx"
results <- tibble(  a= round(get(paste(which_forecast_results, "_1", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_1", sep=""))), my_string_to_detect ),my_column], 4)*cte,
b= round(get(paste(which_forecast_results, "_2", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_2", sep=""))), my_string_to_detect ),my_column], 4)*cte,
c= round(get(paste(which_forecast_results, "_3", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_3", sep=""))), my_string_to_detect ),my_column], 4)*cte,
d= round(get(paste(which_forecast_results, "_4", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_4", sep=""))), my_string_to_detect ),my_column], 4)*cte,
e= round(get(paste(which_forecast_results, "_5", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_5", sep=""))), my_string_to_detect ),my_column], 4)*cte,
f= round(get(paste(which_forecast_results, "_6", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_6", sep=""))), my_string_to_detect ),my_column], 4)*cte,
g= round(get(paste(which_forecast_results, "_7", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_7", sep=""))), my_string_to_detect ),my_column], 4)*cte,
h= round(get(paste(which_forecast_results, "_8", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_8", sep=""))), my_string_to_detect ),my_column], 4)*cte,
i= round(get(paste(which_forecast_results, "_9", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_9", sep=""))), my_string_to_detect ),my_column], 4)*cte,
j= round(get(paste(which_forecast_results, "_10", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_11", sep=""))), my_string_to_detect ),my_column], 4)*cte,
k= round(get(paste(which_forecast_results, "_11", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_11", sep=""))), my_string_to_detect ),my_column], 4)*cte,
l= round(get(paste(which_forecast_results, "_12", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_12", sep=""))), my_string_to_detect ),my_column], 4)*cte,
m= round(get(paste(which_forecast_results, "_13", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_13", sep=""))), my_string_to_detect ),my_column], 4)*cte,
n= round(get(paste(which_forecast_results, "_14", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_14", sep=""))), my_string_to_detect ),my_column], 4)*cte,
o= round(get(paste(which_forecast_results, "_36", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_36", sep=""))), my_string_to_detect ),my_column], 4)*cte,
p= round(get(paste(which_forecast_results, "_60", sep=""))[str_detect(rownames(get(paste(which_forecast_results, "_60", sep=""))), my_string_to_detect ),my_column], 4)*cte )
names(results) <- c(paste(rep("f_"), seq(from=1, to=14, by=1), sep=""), "f_36", "f_60")
results<-as.data.frame(results)
rownames(results) <-  paste(my_independent_variables_list[1:8], my_string_to_detect )
results
#-------------------------------------------------------------------
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\\13. WPs\\08. Ambiguity\\02.Codes\\"
setwd(MyPath)
library(data.table)
library(tidyr)
library(tibble)
library(dplyr)
library(ggplot2)
library(lubridate)
library(gridExtra)
library(stringr)
library(sandwich) # for HAC cov matrix
library(lmtest)
#-------------------------------------------------------------------
load(paste(MyPath,"06.RData\\[2019.04.06]_CRSP_codes10_11_1926-2018_left_right_(thresh_at_0)_and_full.RData", sep=""))
ambiguity_CRSP_codes10_11 <- ambiguity
rm(list=setdiff(ls(), c("MyPath", "ambiguity_CRSP_codes10_11")))
load(paste(MyPath,"06.RData\\[2019.03.19]_Ambiguity_all_100_and_25_portf.RData", sep=""))
ambiguity_portf_100_size_btm <- filter(FINAL_ambiguity, portfolio=='portf_100_size_btm')
ambiguity_portf_100_size_inv <- filter(FINAL_ambiguity, portfolio=='portf_100_size_inv')
ambiguity_portf_100_size_Oper_profit <- filter(FINAL_ambiguity, portfolio=='portf_100_size_Oper_profit')
ambiguity_portf_25_size_btm <- filter(FINAL_ambiguity, portfolio=='portf_25_size_btm')
ambiguity_portf_25_size_inv <- filter(FINAL_ambiguity, portfolio=='portf_25_size_inv')
ambiguity_portf_25_size_Oper_profit <- filter(FINAL_ambiguity, portfolio=='portf_25_size_Oper_profit')
rm(list=setdiff(ls(), c("MyPath",
"ambiguity_CRSP_codes10_11",
"ambiguity_portf_100_size_btm",
"ambiguity_portf_100_size_inv",
"ambiguity_portf_100_size_Oper_profit",
"ambiguity_portf_25_size_btm",
"ambiguity_portf_25_size_inv",
"ambiguity_portf_25_size_Oper_profit")))
#-------------------------------------------------------------------
ambiguity_CRSP_codes10_11 <- left_join(ambiguity_portf_100_size_btm[,1], ambiguity_CRSP_codes10_11, by ="date")
ambiguity_CRSP_codes10_11[is.na(ambiguity_CRSP_codes10_11)] <- 0
# Plotting Ambuiguities Measures
#-------------------------------------------------------------------
ambiguities_indexes <- c("ambiguity_CRSP_codes10_11",
"ambiguity_portf_100_size_btm",
"ambiguity_portf_100_size_inv",
"ambiguity_portf_100_size_Oper_profit",
"ambiguity_portf_25_size_btm",
"ambiguity_portf_25_size_inv",
"ambiguity_portf_25_size_Oper_profit")
plots <- list()
i <- 1
ambiguities_indexes_j<-"ambiguity_CRSP_codes10_11"
ggplot()+
geom_line(aes_string(x= as_date(get(ambiguities_indexes_j)$date), y=sqrt(get(ambiguities_indexes_j)$ambiguity_total_scaled)), color='black', size=1) +
geom_line(aes_string(x= as_date(get(ambiguities_indexes_j)$date), y=sqrt(get(ambiguities_indexes_j)$ambiguity_left_tail_scaled)), color='red', size=1) +
geom_line(aes_string(x= as_date(get(ambiguities_indexes_j)$date), y=sqrt(get(ambiguities_indexes_j)$ambiguity_full_dist_scaled)), color='blue', size=1) +
geom_line(aes_string(x= as_date(get(ambiguities_indexes_j)$date), y=sqrt(get(ambiguities_indexes_j)$ambiguity_right_tail_scaled)), color='purple', size=1) +
scale_x_date(breaks="3 years", minor_breaks = "1 year", date_labels="%y-%m") +
geom_vline(xintercept = ymd("1987-10-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("1994-10-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("1998-09-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2001-02-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2008-09-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2010-04-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2010-12-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2016-11-01"), linetype = "dashed") +
labs(title=ambiguities_indexes_j)
ggplot()+
geom_line(aes_string(x= as_date(get(ambiguities_indexes_j)$date), y=sqrt(get(ambiguities_indexes_j)$ambiguity_full_dist_scaled)), color='blue', size=1) +
scale_x_date(breaks="3 years", minor_breaks = "1 year", date_labels="%y-%m") +
geom_vline(xintercept = ymd("1987-10-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("1994-10-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("1998-09-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2001-02-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2008-09-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2010-04-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2010-12-01"), linetype = "dashed") +
geom_vline(xintercept = ymd("2016-11-01"), linetype = "dashed") +
labs(title=ambiguities_indexes_j)
ambiguity_CRSP_codes10_11
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/13. WPs/08. Ambiguity/02.Codes/06.RData/[2019.04.06]_CRSP_codes10_11_1926-2018_left_right_(thresh_at_0)_and_full.RData")
within_month_left_tail_mean
my_left_tail_cdf_matrix
#--hprice_edited-----------------------------------------------------------------------------------------------
# Running the regression
hprice_edited<-read.csv("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/20.Final Project/hprice_edited.csv")
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/20.Final Project/hprice_edited.RData")
hprice_edited<-hprice_edited_new
rm(hprice_edited_new)
names(hprice_edited)
head(hprice_edited)
dim(hprice_edited)
typeof(hprice_edited)
str(hprice_edited)
library("Hmisc")
describe(hprice_edited)
library(stargazer) #to report regression results in Latex format
stargazer(hprice_edited, type='text', align=TRUE, digits=2)
regression_hprice_edited <- lm(price ~ sqrft + bdrms, data = hprice_edited)
summary(regression_hprice_edited)
stargazer(regression_hprice_edited, type='text', align=TRUE, digits=2)
regression2_hprice_edited <- lm(log(price) ~ sqrft, data = hprice_edited)
summary(regression2_hprice_edited)
stargazer(regression2_hprice_edited, type='text', align=TRUE, digits=2)
regression2_hprice_edited <- lm(log(price) ~ bdrms, data = hprice_edited)
summary(regression2_hprice_edited)
stargazer(regression2_hprice_edited, type='text', align=TRUE, digits=2)
regression3_hprice_edited <- lm(log(price) ~ sqrft + bdrms, data = hprice_edited)
summary(regression3_hprice_edited)
stargazer(regression3_hprice_edited, type='text', align=TRUE, digits=2)
regression4_hprice_edited <- lm(log(price) ~ sqrft + bdrms + lotsize, data = hprice_edited)
summary(regression4_hprice_edited)
stargazer(regression4_hprice_edited, type='text', align=TRUE, digits=2)
regression3_hprice_edited <- lm(log(price) ~ bdrms + lotsize, data = hprice_edited)
summary(regression3_hprice_edited)
stargazer(regression3_hprice_edited, type='text', align=TRUE, digits=2)
getwd()
#--HPRICE-----------------------------------------------------------------------------------------------
# Creating a new dataset
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/01.Textbook/Data Sets/Data Sets - R/hprice1.RData")
hprice<-data
rm(data)
set.seed(10)
hprice_edited<-hprice[,1:6]
to_add<-hprice_edited[sample(nrow(hprice_edited), 30), ]
sd_price<-to_add[,1]    + rnorm(50,0,sd(hprice_edited$price)/5)
sd_assess<-to_add[,2]   + rnorm(50,0,sd(hprice_edited$assess)/5)
sd_bdrms<-to_add[,3]    + rnorm(50,0,sd(hprice_edited$bdrms)/2)
sd_lotsize<-to_add[,4]  + rnorm(50,0,sd(hprice_edited$lotsize)/10+100)
sd_sqrft<-to_add[,5]    + rnorm(50,0,sd(hprice_edited$sqrft))
sd_colonial<-to_add[,6] + rnorm(50,0,sd(hprice_edited$colonial))
to_add<-cbind(round(sd_price,0), round(sd_assess,1), round(sd_bdrms,0), round(sd_lotsize,0), round(sd_sqrft,0), trunc(sd_colonial))
colnames(to_add)<-names(hprice_edited)
hprice_edited_new<-rbind(hprice_edited, to_add)
dim(hprice_edited_new)
rownames(hprice_edited_new) <- 1:nrow(hprice_edited_new)
hprice_edited_new
#--HPRICE-----------------------------------------------------------------------------------------------
# Creating a new dataset
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/01.Textbook/Data Sets/Data Sets - R/hprice1.RData")
hprice<-data
rm(data)
set.seed(10)
hprice_edited<-hprice[,1:6]
to_add<-hprice_edited[sample(nrow(hprice_edited), 50), ]
sd_price<-to_add[,1]    + rnorm(50,0,sd(hprice_edited$price)/5)
sd_assess<-to_add[,2]   + rnorm(50,0,sd(hprice_edited$assess)/5)
sd_bdrms<-to_add[,3]    + rnorm(50,0,sd(hprice_edited$bdrms)/2)
sd_lotsize<-to_add[,4]  + rnorm(50,0,sd(hprice_edited$lotsize)/10+100)
sd_sqrft<-to_add[,5]    + rnorm(50,0,sd(hprice_edited$sqrft))
sd_colonial<-to_add[,6] + rnorm(50,0,sd(hprice_edited$colonial))
to_add<-cbind(round(sd_price,0), round(sd_assess,1), round(sd_bdrms,0), round(sd_lotsize,0), round(sd_sqrft,0), trunc(sd_colonial))
colnames(to_add)<-names(hprice_edited)
hprice_edited_new<-rbind(hprice_edited, to_add)
dim(hprice_edited_new)
rownames(hprice_edited_new) <- 1:nrow(hprice_edited_new)
hprice_edited_new
to_add[,1]
rnorm(50,0,sd(hprice_edited$price)/5)
to_add[,1]    + rnorm(50,0,sd(hprice_edited$price)/5)
#--HPRICE-----------------------------------------------------------------------------------------------
# Creating a new dataset
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/01.Textbook/Data Sets/Data Sets - R/hprice1.RData")
hprice<-data
rm(data)
set.seed(20190410)
hprice_edited<-hprice[,1:6]
to_add<-hprice_edited[sample(nrow(hprice_edited), 50), ]
sd_price<-to_add[,1]    + rnorm(50,0,sd(hprice_edited$price)/5)
sd_assess<-to_add[,2]   + rnorm(50,0,sd(hprice_edited$assess)/5)
sd_bdrms<-to_add[,3]    + rnorm(50,0,sd(hprice_edited$bdrms)/2)
sd_lotsize<-to_add[,4]  + rnorm(50,0,sd(hprice_edited$lotsize)/10+100)
sd_sqrft<-to_add[,5]    + rnorm(50,0,sd(hprice_edited$sqrft))
sd_colonial<-to_add[,6] + rnorm(50,0,sd(hprice_edited$colonial))
to_add<-cbind(round(sd_price,0), round(sd_assess,1), round(sd_bdrms,0), round(sd_lotsize,0), round(sd_sqrft,0), trunc(sd_colonial))
colnames(to_add)<-names(hprice_edited)
hprice_edited_new<-rbind(hprice_edited, to_add)
dim(hprice_edited_new)
rownames(hprice_edited_new) <- 1:nrow(hprice_edited_new)
hprice_edited_new
write.csv(hprice_edited_new, file = "C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.01/20.Final Project/hprice_edited.csv")
write.csv(hprice_edited_new, file = "C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.01/20.Final Project/hprice_edited.csv")
setwd("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.01/20.Final Project/")
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\\13. WPs\\08. Ambiguity\\02.Codes\\"
setwd(MyPath)
setwd("C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\10. GTA\\2019.01\\20.Final Project\\")
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\10. GTA\\2019.01\\20.Final Project\\"
setwd(MyPath)
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\10. GTA\\2019.01\\20.Final Project\\"
setwd(MyPath)
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\10. GTA\\2019.01\\20.Final Project"
setwd(MyPath)
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\10. GTA\\2019.01\\20.Final Project\\"
setwd(MyPath)
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\\10. GTA\\2019.01\\20.Final Project\\"
setwd(MyPath)
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\\10. GTA\\2019.01\\20.Final Project\\"
setwd(MyPath)
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/01.Textbook/Data Sets/Data Sets - R/hprice1.RData")
hprice<-data
rm(data)
set.seed(20190410)
hprice_edited<-hprice[,1:6]
to_add<-hprice_edited[sample(nrow(hprice_edited), 50), ]
sd_price<-to_add[,1]    + rnorm(50,0,sd(hprice_edited$price)/5)
sd_assess<-to_add[,2]   + rnorm(50,0,sd(hprice_edited$assess)/5)
sd_bdrms<-to_add[,3]    + rnorm(50,0,sd(hprice_edited$bdrms)/2)
sd_lotsize<-to_add[,4]  + rnorm(50,0,sd(hprice_edited$lotsize)/10+100)
sd_sqrft<-to_add[,5]    + rnorm(50,0,sd(hprice_edited$sqrft))
sd_colonial<-to_add[,6] + rnorm(50,0,sd(hprice_edited$colonial))
to_add<-cbind(round(sd_price,0), round(sd_assess,1), round(sd_bdrms,0), round(sd_lotsize,0), round(sd_sqrft,0), trunc(sd_colonial))
colnames(to_add)<-names(hprice_edited)
hprice_edited_new<-rbind(hprice_edited, to_add)
dim(hprice_edited_new)
rownames(hprice_edited_new) <- 1:nrow(hprice_edited_new)
hprice_edited_new
write.csv(hprice_edited_new, file = "hprice_edited.csv")
write.csv(hprice_edited_new, file = "hprice_edited.csv")
save(hprice_edited_new, file = "hprice_edited.RData")
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/20.Final Project/hprice_edited.RData")
hprice_edited<-hprice_edited_new
rm(hprice_edited_new)
names(hprice_edited)
head(hprice_edited)
dim(hprice_edited)
typeof(hprice_edited)
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.01/20.Final Project/hprice_edited.RData")
hprice_edited<-hprice_edited_new
rm(hprice_edited_new)
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.01/20.Final Project/hprice_edited.RData")
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2019.01/20.Final Project/hprice_edited.RData")
hprice_edited<-hprice_edited_new
rm(hprice_edited_new)
names(hprice_edited)
head(hprice_edited)
dim(hprice_edited)
typeof(hprice_edited)
typeof(hprice_edited)
str(hprice_edited)
View(hprice_edited)
library("Hmisc")
describe(hprice_edited)
library(stargazer) #to report regression results in Latex format
stargazer(hprice_edited, type='text', align=TRUE, digits=2)
regression_hprice_edited <- lm(price ~ sqrft + bdrms, data = hprice_edited)
summary(regression_hprice_edited)
stargazer(regression_hprice_edited, type='text', align=TRUE, digits=2)
regression2_hprice_edited <- lm(log(price) ~ bdrms, data = hprice_edited)
summary(regression2_hprice_edited)
stargazer(regression2_hprice_edited, type='text', align=TRUE, digits=2)
regression3_hprice_edited <- lm(log(price) ~ sqrft + bdrms, data = hprice_edited)
summary(regression3_hprice_edited)
stargazer(regression3_hprice_edited, type='text', align=TRUE, digits=2)
#--HPRICE-----------------------------------------------------------------------------------------------
# Creating a new dataset
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\\10. GTA\\2019.01\\20.Final Project\\"
setwd(MyPath)
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/01.Textbook/Data Sets/Data Sets - R/hprice1.RData")
hprice<-data
rm(data)
set.seed(20190410)
hprice_edited<-hprice[,1:6]
to_add<-hprice_edited[sample(nrow(hprice_edited), 50), ]
sd_price<-to_add[,1]    + rnorm(50,0,sd(hprice_edited$price)/5)
sd_assess<-to_add[,2]   + rnorm(50,0,sd(hprice_edited$assess)/5)
sd_bdrms<-to_add[,3]    + rnorm(50,0,sd(hprice_edited$bdrms)/2)
sd_lotsize<-to_add[,4]  + rnorm(50,0,sd(hprice_edited$lotsize)/10+100)
sd_sqrft<-to_add[,5]    + rnorm(50,0,sd(hprice_edited$sqrft))
sd_colonial<-to_add[,6] + rnorm(50,0,sd(hprice_edited$colonial))
to_add<-cbind(round(sd_price,0), round(sd_assess,1), round(sd_bdrms,0), round(sd_lotsize,0), round(sd_sqrft,0), trunc(sd_colonial))
colnames(to_add)<-names(hprice_edited)
hprice_edited_new<-rbind(hprice_edited, to_add)
dim(hprice_edited_new)
rownames(hprice_edited_new) <- 1:nrow(hprice_edited_new)
hprice_edited_new
hprice_edited_new[,1:5]
#--HPRICE-----------------------------------------------------------------------------------------------
# Creating a new dataset
MyPath <- "C:\\Users\\Caio Laptop\\OneDrive - The University of Kansas\\Documents\\PhD\\10. GTA\\2019.01\\20.Final Project\\"
setwd(MyPath)
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2018.02/01.Textbook/Data Sets/Data Sets - R/hprice1.RData")
hprice<-data
rm(data)
set.seed(20190410)
hprice_edited<-hprice[,1:6]
to_add<-hprice_edited[sample(nrow(hprice_edited), 50), ]
sd_price<-to_add[,1]    + rnorm(50,0,sd(hprice_edited$price)/5)
sd_assess<-to_add[,2]   + rnorm(50,0,sd(hprice_edited$assess)/5)
sd_bdrms<-to_add[,3]    + rnorm(50,0,sd(hprice_edited$bdrms)/2)
sd_lotsize<-to_add[,4]  + rnorm(50,0,sd(hprice_edited$lotsize)/10+100)
sd_sqrft<-to_add[,5]    + rnorm(50,0,sd(hprice_edited$sqrft))
sd_colonial<-to_add[,6] + rnorm(50,0,sd(hprice_edited$colonial))
to_add<-cbind(round(sd_price,0), round(sd_assess,1), round(sd_bdrms,0), round(sd_lotsize,0), round(sd_sqrft,0), trunc(sd_colonial))
colnames(to_add)<-names(hprice_edited)
hprice_edited_new<-rbind(hprice_edited, to_add)
dim(hprice_edited_new)
rownames(hprice_edited_new) <- 1:nrow(hprice_edited_new)
hprice_edited_new
hprice_edited_new <- hprice_edited_new[,1:5]
write.csv(hprice_edited_new, file = "hprice_edited.csv")
save(hprice_edited_new, file = "hprice_edited.RData")
load("C:/Users/Caio Laptop/OneDrive - The University of Kansas/Documents/PhD/10. GTA/2019.01/20.Final Project/hprice_edited.RData")
hprice_edited<-hprice_edited_new
rm(hprice_edited_new)
library(stargazer) #to report regression results in Latex format
stargazer(hprice_edited, type='text', align=TRUE, digits=2)
regression_hprice_edited <- lm(price ~ bdrms + sqrft, data = hprice_edited)
summary(regression_hprice_edited)
stargazer(regression_hprice_edited, type='text', align=TRUE, digits=2)
regression2_hprice_edited <- lm(log(price) ~ bdrms, data = hprice_edited)
summary(regression2_hprice_edited)
stargazer(regression2_hprice_edited, type='text', align=TRUE, digits=2)
regression3_hprice_edited <- lm(log(price) ~ bdrms + sqrft, data = hprice_edited)
summary(regression3_hprice_edited)
stargazer(regression3_hprice_edited, type='text', align=TRUE, digits=2)
